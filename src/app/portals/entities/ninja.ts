/**
 Auto-generated by: angular-three-plugin:gltf
 Size: C:\Users\tim.zimmermann\Desktop\learning\angular-learn\public\Ninja.gltf [1.23MB] &gt; C:\Users\tim.zimmermann\Desktop\learning\angular-learn\public\Ninja.gltf-transformed.glb [326.05KB] (73%)
 */

import type * as THREE from 'three';
import { Group, SkinnedMesh } from 'three';
import { extend, type NgtThreeElements, NgtElementEvents, NgtObjectEvents, NgtArgs  } from 'angular-three';
import { Component, ChangeDetectionStrategy, CUSTOM_ELEMENTS_SCHEMA, input, viewChild, ElementRef, inject, effect, model, signal } from '@angular/core';
import { gltfResource } from 'angular-three-soba/loaders';
import type { GLTF } from 'three-stdlib';
import { animations, type NgtsAnimationClips, type NgtsAnimationApi } from 'angular-three-soba/misc';

// @ts-expect-error - import .glb/.gltf file
import NinjaGLTF from '../../../../public/Ninja.gltf-transformed.glb' with { loader: 'file' };
import { modelHoveredAnimation } from '../model-hovered-animation';


gltfResource.preload(NinjaGLTF);


type ActionName = 'Death' | 'Duck' | 'HitReact' | 'Idle' | 'Jump' | 'Jump_Idle' | 'Jump_Land' | 'No' | 'Punch' | 'Run' | 'Walk' | 'Wave' | 'Weapon' | 'Yes';
type NinjaAnimationClips = NgtsAnimationClips<ActionName>;
export type NinjaAnimationApi = Exclude<NgtsAnimationApi<NinjaAnimationClips>, { get isReady(): false }>;

export type NinjaGLTFGLTFResult = GLTF & {
  nodes: {
    'Ninja': THREE.SkinnedMesh
    'Root': THREE.Bone
  };
  materials: {
    'Atlas': THREE.MeshStandardMaterial
  };
  animations: NinjaAnimationClips[];
};

@Component({
  selector: 'app-ninja',
  template: `
    @if (gltf.value(); as gltf) {
      @let nodes = gltf.nodes;
      @let materials = gltf.materials;

      <ngt-group #model [parameters]="options()" (pointerover)="hovered.set(true)" (pointerout)="hovered.set(false)">
        <ngt-primitive *args=[nodes.Root] />

<ngt-skinned-mesh name="Ninja" [geometry]="nodes.Ninja.geometry" [material]="materials.Atlas" [skeleton]="nodes.Ninja.skeleton" />

        <ng-content />
      </ngt-group>
    }
  `,
  schemas: [CUSTOM_ELEMENTS_SCHEMA],
  changeDetection: ChangeDetectionStrategy.OnPush,
  hostDirectives: [
    {
      directive: NgtObjectEvents,
      outputs: ['click', 'dblclick', 'contextmenu', 'pointerup', 'pointerdown', 'pointerover', 'pointerout', 'pointerenter', 'pointerleave', 'pointermove', 'pointermissed', 'pointercancel', 'wheel'],
    },
    {
      directive: NgtElementEvents,
      outputs: ['attached', 'updated', 'created', 'disposed']
    }
  ],
  imports: [NgtArgs ]
})
export class Ninja {
  protected readonly Math = Math;

  options = input({} as Partial<NgtThreeElements['ngt-group']>);
  animations = model<NinjaAnimationApi>();

  modelRef = viewChild<ElementRef<Group>>('model');

  protected gltf = gltfResource<NinjaGLTFGLTFResult>(() =>  NinjaGLTF , { useDraco: true });

  protected hovered = signal(false);

  constructor() {
    extend({ Group, SkinnedMesh });

    
    const _animations = animations(this.gltf.value, this.modelRef);
    effect(() => {
      if (!_animations.isReady) return;
      this.animations.set(_animations);
    });

    modelHoveredAnimation(
      this.hovered,
      this.animations,
      "Walk",
      "Run"
    )
    

    const objectEvents = inject(NgtObjectEvents, { host: true });
    const elementEvents = inject(NgtElementEvents, { host: true });

    objectEvents.ngtObjectEvents.set(this.modelRef);
    elementEvents.ngtElementEvents.set(this.modelRef);
  }
}
