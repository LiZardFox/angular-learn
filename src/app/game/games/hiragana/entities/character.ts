/**
 Auto-generated by: angular-three-plugin:gltf
 Size: C:\Users\tim.zimmermann\Desktop\learning\angular-learn\public\models\Male.gltf [92.92KB] &gt; C:\Users\tim.zimmermann\Desktop\learning\angular-learn\public\models\Male.gltf-transformed.glb [36.43KB] (61%)
 */

import type * as THREE from 'three';
import { Group, SkinnedMesh } from 'three';
import {
  extend,
  type NgtThreeElements,
  NgtElementEvents,
  NgtObjectEvents,
  NgtArgs,
} from 'angular-three';
import {
  Component,
  ChangeDetectionStrategy,
  CUSTOM_ELEMENTS_SCHEMA,
  input,
  viewChild,
  ElementRef,
  inject,
} from '@angular/core';
import { gltfResource } from 'angular-three-soba/loaders';
import type { GLTF } from 'three-stdlib';

// @ts-expect-error - import .glb/.gltf file
import CharacterGLTF from '../../../../../../public/models/Male.gltf-transformed.glb' with { loader: 'file' };

gltfResource.preload(CharacterGLTF);

export type CharacterGLTFGLTFResult = GLTF & {
  nodes: {
    characterMedium: THREE.SkinnedMesh;
    LeftFootCtrl: THREE.Bone;
    RightFootCtrl: THREE.Bone;
    HipsCtrl: THREE.Bone;
  };
  materials: {
    'skin.001': THREE.MeshStandardMaterial;
  };
};

@Component({
  selector: 'game-character',
  template: `
    @if (gltf.value(); as gltf) {
      @let nodes = gltf.nodes;
      @let materials = gltf.materials;

      <ngt-group #model [parameters]="options()" [dispose]="null">
        <ngt-primitive *args="[nodes.LeftFootCtrl]" />

        <ngt-primitive *args="[nodes.RightFootCtrl]" />

        <ngt-primitive *args="[nodes.HipsCtrl]" />

        <ngt-skinned-mesh
          [geometry]="nodes.characterMedium.geometry"
          [material]="materials['skin.001']"
          [skeleton]="nodes.characterMedium.skeleton"
          [scale]="0.64"
          castShadow
        />

        <ng-content />
      </ngt-group>
    }
  `,
  schemas: [CUSTOM_ELEMENTS_SCHEMA],
  changeDetection: ChangeDetectionStrategy.OnPush,
  hostDirectives: [
    {
      directive: NgtObjectEvents,
      outputs: [
        'click',
        'dblclick',
        'contextmenu',
        'pointerup',
        'pointerdown',
        'pointerover',
        'pointerout',
        'pointerenter',
        'pointerleave',
        'pointermove',
        'pointermissed',
        'pointercancel',
        'wheel',
      ],
    },
    {
      directive: NgtElementEvents,
      outputs: ['attached', 'updated', 'created', 'disposed'],
    },
  ],
  imports: [NgtArgs],
})
export class Character {
  protected readonly Math = Math;

  options = input({} as Partial<NgtThreeElements['ngt-group']>);

  modelRef = viewChild<ElementRef<Group>>('model');

  protected gltf = gltfResource<CharacterGLTFGLTFResult>(() => CharacterGLTF, {
    useDraco: true,
  });

  constructor() {
    extend({ Group, SkinnedMesh });

    const objectEvents = inject(NgtObjectEvents, { host: true });
    const elementEvents = inject(NgtElementEvents, { host: true });

    objectEvents.ngtObjectEvents.set(this.modelRef);
    elementEvents.ngtElementEvents.set(this.modelRef);
  }
}
