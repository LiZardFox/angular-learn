/**
 Auto-generated by: angular-three-plugin:gltf
 Size: C:\Users\tim.zimmermann\Desktop\learning\angular-learn\public\axe-throwing\models\AncientRuins-v1.glb [557.18KB] &gt; C:\Users\tim.zimmermann\Desktop\learning\angular-learn\public\axe-throwing\models\AncientRuins-v1.glb-transformed.glb [486.9KB] (13%)
 */

import type * as THREE from 'three';
import { Group, Mesh } from 'three';
import {
  extend,
  type NgtThreeElements,
  NgtElementEvents,
  NgtObjectEvents,
} from 'angular-three';
import {
  Component,
  ChangeDetectionStrategy,
  CUSTOM_ELEMENTS_SCHEMA,
  input,
  viewChild,
  ElementRef,
  inject,
} from '@angular/core';
import { gltfResource } from 'angular-three-soba/loaders';
import type { GLTF } from 'three-stdlib';
import { ruins } from './models';

export type AncientRuinGLTFGLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh;
    Plane_1: THREE.Mesh;
    Plane_2: THREE.Mesh;
  };
  materials: {
    PaletteMaterial002: THREE.MeshPhysicalMaterial;
    PaletteMaterial003: THREE.MeshStandardMaterial;
    PaletteMaterial001: THREE.MeshStandardMaterial;
  };
};

@Component({
  selector: 'game-axe-throwing-ancient-ruin',
  template: `
    @if (gltf.value(); as gltf) {
      @let nodes = gltf.nodes;
      @let materials = gltf.materials;

      <ngt-group #model [parameters]="options()" [dispose]="null">
        <ngt-mesh
          castShadow
          receiveShadow
          [geometry]="nodes.Plane.geometry"
          [material]="materials.PaletteMaterial002"
        />
        <ngt-mesh
          castShadow
          receiveShadow
          [geometry]="nodes.Plane_1.geometry"
          [material]="materials.PaletteMaterial003"
        />
        <ngt-mesh
          castShadow
          receiveShadow
          [geometry]="nodes.Plane_2.geometry"
          [material]="materials.PaletteMaterial001"
        />

        <ng-content />
      </ngt-group>
    }
  `,
  schemas: [CUSTOM_ELEMENTS_SCHEMA],
  changeDetection: ChangeDetectionStrategy.OnPush,
  hostDirectives: [
    {
      directive: NgtObjectEvents,
      outputs: [
        'click',
        'dblclick',
        'contextmenu',
        'pointerup',
        'pointerdown',
        'pointerover',
        'pointerout',
        'pointerenter',
        'pointerleave',
        'pointermove',
        'pointermissed',
        'pointercancel',
        'wheel',
      ],
    },
    {
      directive: NgtElementEvents,
      outputs: ['attached', 'updated', 'created', 'disposed'],
    },
  ],
})
export class AncientRuin {
  protected readonly Math = Math;

  options = input({} as Partial<NgtThreeElements['ngt-group']>);

  modelRef = viewChild<ElementRef<Group>>('model');

  protected gltf = gltfResource<AncientRuinGLTFGLTFResult>(() => ruins);

  constructor() {
    extend({ Group, Mesh });

    const objectEvents = inject(NgtObjectEvents, { host: true });
    const elementEvents = inject(NgtElementEvents, { host: true });

    objectEvents.ngtObjectEvents.set(this.modelRef);
    elementEvents.ngtElementEvents.set(this.modelRef);
  }
}
